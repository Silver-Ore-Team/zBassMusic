name: Build CMake Project

on:
  workflow_call:
    secrets:
      SSH_KEY:
        required: false
        description: SSH private key for pushing version changes
      SONAR_TOKEN:
        required: false
        description: SonarCloud token for code analysis
      SONAR_HOST_URL:
        required: false
        description: SonarCloud host URL
    inputs:
      cmake-preset:
        required: true
        type: string
      upload-artifact-dll:
        required: false
        type: string
        default: false
      upload-artifact-dll-pdb:
        required: false
        type: string
        default: false
      upload-artifact-vdf:
        required: false
        type: string
        default: false
      msvc-toolkit:
        required: false
        type: string
        default: 14.40
      project-version:
        required: false
        type: string
        default: false
      push-version-commit:
        required: false
        type: boolean
        default: false
      push-version-branch:
        required: false
        type: string
        default: main
      enable-sonar:
        required: false
        type: boolean
        default: false
      enable-tests:
        required: false
        type: boolean
        default: true
      notify-tests:
        required: false
        type: boolean
        default: false

jobs:
  build:
    name: MSVC / Windows 2022
    runs-on: windows-2022
    permissions:
      pull-requests: write
    env:
      BUILD_WRAPPER_OUT_DIR: build_wrapper_output
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
      - uses: TheMrMilchmann/setup-msvc-dev@v3
        with:
          arch: x86
          toolset: ${{ inputs.msvc-toolkit }}
          export-path-to-vcvarsall: VCVARSALL
      - name: CMake Setup
        uses: lukka/get-cmake@latest
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          persist-credentials: false
      - name: Set project version
        if: ${{ inputs.project-version != 'false' }}
        run: powershell ./set-version.ps1 ${{ inputs.project-version }}
      - name: Setup token for branch rules bypass
        uses: webfactory/ssh-agent@v0.9.0
        if: ${{ inputs.push-version-commit == true }}
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}
      - name: Commit version change
        if: ${{ inputs.push-version-commit == true }}
        run: |
          New-Item -ItemType Directory -Force -Path ~/.ssh
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          git config --global user.name "Nekobot"
          git config --global user.email "nekobot-service.noreply@silveroreteam.pl"
          git remote set-url origin git@github.com:Silver-Ore-Team/zBassMusic.git
          git fetch --all
          git checkout ${{ inputs.push-version-branch }}
          $changes = $(git status -s)
          if ($changes) {
            git add CMakeLists.txt
            git commit -m "[skip ci] set project version to ${{ inputs.project-version }}"
            git push origin ${{ inputs.push-version-branch }}
          } else {
            echo "No changes to commit"
          }
      - name: CMake Configure
        run: cmake --preset ${{ inputs.cmake-preset }}
      - name: CMake Build
        if: ${{ inputs.enable-sonar == false }}
        run: |
          cmake --build out/build/${{ inputs.cmake-preset }} --target zbassmusic_vdf -j 16
      - name: Install Sonar
        if: ${{ inputs.enable-sonar == true }}
        run: |
          Invoke-WebRequest https://sonarcloud.io/static/cpp/build-wrapper-win-x86.zip -OutFile build-wrapper-win-x86.zip
          Expand-Archive build-wrapper-win-x86.zip -Destination .
          Invoke-WebRequest https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-6.0.0.4432-windows.zip -OutFile sonar-scanner-cli-6.0.0.4432-windows.zip
          Expand-Archive sonar-scanner-cli-6.0.0.4432-windows.zip -Destination .
      - name: CMake Build (Sonar Wrapper)
        if: ${{ inputs.enable-sonar == true }}
        run: |
          ./build-wrapper-win-x86/build-wrapper-win-x86-64.exe --out-dir ${{ env.BUILD_WRAPPER_OUT_DIR }} cmake --build out/build/${{ inputs.cmake-preset }} --target zbassmusic_vdf -j 16
      - name: Sonar Scanner
        if: ${{ inputs.enable-sonar == true }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          ./sonar-scanner-6.0.0.4432-windows/bin/sonar-scanner.bat --define sonar.cfamily.build-wrapper-output="${{ env.BUILD_WRAPPER_OUT_DIR }}"
      - name: CTest
        id: tests
        if: ${{ inputs.enable-tests == true }}
        run: |
          $status = $false;
          cmake --build out/build/${{ inputs.cmake-preset }} --target tests -j 16
          if (ctest --test-dir out/build/${{ inputs.cmake-preset }}/tests -j 16) {
            echo "tests=success" >> $env:GITHUB_OUTPUT
            $status = $true;
          } else {
            echo "tests=failed" >> $env:GITHUB_OUTPUT
          }
          $testsLog = (Get-Content -Path out/build/${{ inputs.cmake-preset }}/tests/Testing/Temporary/LastTest.log) -join "%%%"
          echo "tests_log=${testsLog}" >> $env:GITHUB_OUTPUT
          cat out/build/${{ inputs.cmake-preset }}/tests/Testing/Temporary/LastTest.log
          if (-not $status) {
            exit -1
          }
      - name: CTest Result PR
        if: ${{ inputs.enable-tests == true && inputs.notify-tests == true && github.event_name == 'pull_request' }}
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const status = '${{ steps.tests.outputs.tests }}';
            const log = '${{ steps.output.outputs.tests_log }}';
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: (status === 'success' ? '😍 Tests passed!' : '😨 Tests failed!') + '\n\n' + log.replace('%%%', '\n')
            })
      - name: CMake Install
        run: cmake --install out/build/${{ inputs.cmake-preset }} --prefix out/install/${{ inputs.cmake-preset }}
      - name: Archive DLL
        if: ${{ inputs.upload-artifact-dll != 'false' }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.upload-artifact-dll }}
          path: out/install/${{ inputs.cmake-preset }}/bin/*.dll
      - name: Archive DLL PDB
        uses: actions/upload-artifact@v4
        if: ${{ inputs.upload-artifact-dll-pdb != 'false' }}
        with:
          name:  ${{ inputs.upload-artifact-dll-pdb }}
          path: |
            out/build/${{ inputs.cmake-preset }}/*.dll
            out/build/${{ inputs.cmake-preset }}/*.pdb
      - name: Archive VDF
        uses: actions/upload-artifact@v4
        if: ${{ inputs.upload-artifact-vdf != 'false' }}
        with:
          name: ${{ inputs.upload-artifact-vdf }}
          path: out/install/${{ inputs.cmake-preset }}/*.vdf