{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"zBassMusic","text":"<p>zBassMusic is a modern music system for Gothic games based on ZenGin. It replaces the original DirectMusic system with a custom engine built on top of BASS Library to provide easier workflow for composers and additional functions for the perfect soundtrack design. The most important features include:</p> <ul> <li>Direct playback of common audio formats (WAV, OGG, MP3) instead of DirectMusic proprietary formats</li> <li>Out-of-the-box support for existing music theme definitions (just change the audio file)</li> <li>Alternative scheduling &amp; transition systems to support smooth cross-fades between themes</li> <li>Loading of music files from VDF volumes (DirectMusic required physical files)</li> <li>Scriptable interface for controlling the system from Deadalus scripts</li> <li>Backward compatibility with original <code>.sgt</code> music (it's redirected to the DirectMusic system)</li> </ul> <ul> <li> <p>: Release Builds</p> <p>Release builds are ready to be used in Gothic and we publish them automatically on our GitHub.</p> <p> Releases</p> </li> <li> <p> Source Code</p> <p>zBassMusic is open source and you can access the code on our public repo hosted by GitHub.</p> <p> GitHub</p> </li> <li> <p> Bug Reporting</p> <p>If you have found a bug in zBassMusic, please create an issue on GitHub and tell us what's wrong.</p> <p> Issues</p> </li> <li> <p> Discussions</p> <p>We listen to ideas for new features, so if something is missing from zBassMusic, let us know and we'll do it.</p> <p> Discussions</p> </li> </ul>"},{"location":"#for-modders","title":"For modders","text":"<p>zBassMusic is designed exclusively for Gothic modders to include it in their mods and it's licensed under a permissive MIT License, so you can use the plugin for free in any project<sup>1</sup>. It's built using the new union-api and can be embedded either as a Union 1.0m plugin or as a completely standalone plugin for base Gothic with System Pack.</p> <p>Check out Getting Started for instructions how to start working with zBassMusic.</p>"},{"location":"#for-players","title":"For players","text":"<p>Unlike most Union plugins, zBassMusic doesn't provide any functions directly for the players who just play base game or some other mod utilizing the original music system. In order to make use of the plugin, you have to actually put your music in the game, so there is no point of installing zBassMusic if you are not making a mod.</p>"},{"location":"#repository","title":"Repository","text":"<p>zBassMusic is an open source project with the source code available on GitHub.</p> <ul> <li>GitHub Repository</li> <li>Release Builds</li> <li>Bug Reporting</li> <li>Discussions</li> </ul>"},{"location":"#authors","title":"Authors","text":"<p>zBassMusic development started in 2023 as an internal plugin for Nek's History to ease the collaboration with our composer<sup>2</sup> who had zero knowledge of DirectMusic Producer workflow and forcing him to learn it would be a complete waste of time and possibly limit the creativity. Sometime later the internal code base based on Union SDK 1.0m was rewritten for union\u2011api \u2014\u00a0the successor of Union SDK, and published as an open source project.</p> <p>The project is maintained under Silver Ore Team modding group by tehe:</p> <ul> <li>Email: piotr.macha@silveroreteam.pl</li> <li>Discord: @tehe.official</li> </ul> <p>The mentionable contributors for the early stage development are Bogu\u015b and Emu who have helped sorting some things up. If you'd like to also help zBassMusic development, check out Developer Guide and feel free to submit a Pull Request. One accepted merge and you will join the gallery.</p> <p></p> <ol> <li> <p>zBassMusic depends on vendored libraries union-api and gothic-api licensed under GNU GPL Version 3 and on propertiary licensed BASS Library that's free for non-commercial use only. Make sure you are not violating these terms while using zBassMusic.\u00a0\u21a9</p> </li> <li> <p>Adam Dzie\u017cyk, composer for Golden Gate, Golden Gate 2, Nek's History and many non-Gothic projects. Also a reason why zBassMusic exists.\u00a0\u21a9</p> </li> </ol>"},{"location":"configuration/","title":"Configuration","text":""},{"location":"developer-guide/","title":"Developer Guide","text":"<p>This guide is intended for developers who would like to work on zBassMusic code or get a better understanding of how the system works. It explains the architecture of the system, how to build it, and how to extend it.</p>"},{"location":"developer-guide/#prerequisites","title":"Prerequisites","text":"<ul> <li>MSVC 14.39 or later</li> <li>CMake 3.25 or later</li> <li>Git</li> </ul>"},{"location":"developer-guide/#setup-project","title":"Setup Project","text":"<p>CMake vs IDE</p> <p>The setup instructions assume no IDE is used, and CMake is called from the command line.  If you use Visual Studio, CLion or any other IDE, you can use the CMake integration from it. </p>"},{"location":"developer-guide/#fork-repository","title":"Fork Repository","text":"<p>Unless you are an internal contributor, you can't push directly to the repository, so you have to fork it first. To do it, click the \"Fork\" button in the top right corner of the repository page.</p>"},{"location":"developer-guide/#clone-repository","title":"Clone Repository","text":"<p>Clone your fork of the repository to your local machine.</p> <pre><code>git clone git@github.com:YOUR_USERNAME/zBassMusic.git\n</code></pre>"},{"location":"developer-guide/#initialize-submodules","title":"Initialize Submodules","text":"<p>Pull the submodule dependencies.</p> <pre><code>git submodule init --remote\n</code></pre>"},{"location":"developer-guide/#generate-cmake","title":"Generate CMake","text":"<p>Generate CMake build directory using x86-debug preset. You can use presets:</p> <ul> <li><code>x86-release</code> (Release)</li> <li><code>x86-release-pdb</code> (RelWithDebInfo)</li> <li><code>x86-debug</code> (Debug)</li> </ul> <pre><code>cmake --preset=\"x86-debug\"\n</code></pre>"},{"location":"developer-guide/#build-project","title":"Build Project","text":"<p>Now you can compile the project.</p> <pre><code>cmake --build --preset=\"x86-debug\"\n</code></pre> <p>Compiled binaries will be in the <code>out/x86-debug/build</code> directory.</p> <p>VDF build will be in the <code>out/x86-debug/install</code> directory.</p>"},{"location":"developer-guide/#run-project","title":"Run Project","text":"<p>The project doesn't have any executables. You can run it using Gothic I or Gothic II games after installing the plugin. For more information, see the User Guide.</p> <p>We recommend starting Gothic with debuggers attached to catch any unexpected exceptions.</p>"},{"location":"developer-guide/architecture/","title":"Architecture","text":"<p>zBassMusic is a native plugin for Gothic games built with union-api library. The Union API hooks into original Gothic process, loads our code and let us create hooks for the Gothic functions. With this approach we can run our code in Gothic and change the behavior of the original code.</p> <p>The core action we take is to hook into the Gothic initialization procedures and replace the global pointer to the original music system with a pointer to our own implementation. Because other parts of Gothic are using the global pointer to interact with the music system, we catch all the use cases and take full control.</p>"},{"location":"developer-guide/architecture/#gothic-music-system","title":"Gothic Music System","text":"<p>Conveniently, Gothic defines the music system as a pure virtual class (interface) and DirectMusic is only an implementation, alongside with a Dummy implementation used when the music is disabled. Thanks to this, we can just implement the interface to provide our own virtual functions.</p> <pre>1eb8dbb850e134f3fb7c6903664081933bd1d0b98f01f186a4d3cedb6a3936cfd4f5c61f0acc3bf5137c4286ee93d8e1c15f7b43435855e2704471b82b89953d</pre><pre>6f16d5a1e5ec57d0afafaa3882a3a9a6d4130d7f553199f3b414c1e5c701ca51182c27d562bd12387cde677b2b9f3e197bd6fb73ff774ed412014c510750f5ce</pre> <p>When the project started, a lot of code was inside the <code>CMusicSys_Bass</code> class to behave similar as the original system. After refactoring motivated by changes in v0.2.x and v0.3.x, we have moved almost all processing to the <code>NH::Bass</code> classes and now <code>CMusicSys_Bass</code> is just a simple bridge to get the events from Gothic and push them on a command queue. </p>"},{"location":"developer-guide/architecture/#control-flow","title":"Control Flow","text":"<p>...</p>"},{"location":"developer-guide/architecture/#engine","title":"Engine","text":"<p>...</p>"},{"location":"developer-guide/architecture/#commandqueue","title":"CommandQueue","text":"<p>...</p>"},{"location":"developer-guide/architecture/#eventmanager","title":"EventManager","text":"<p>...</p>"},{"location":"developer-guide/architecture/#musicmanager","title":"MusicManager","text":"<p>...</p>"},{"location":"developer-guide/architecture/#musictheme","title":"MusicTheme","text":"<p>...</p>"},{"location":"developer-guide/contributing/","title":"Contributing","text":"<p>We welcome contributions to the project with open arms. This document will guide you through the process of contributing to the project.</p>"},{"location":"developer-guide/contributing/#prerequisites","title":"Prerequisites","text":"<ul> <li>Fork the repository and setup project as described in the Developer Guide</li> <li>Familiarize yourself with the Style Guide</li> <li>Familiarize yourself with   the Code of Conduct (or just be a nice   guy, don't need to read it)</li> </ul>"},{"location":"developer-guide/contributing/#what-can-i-contribute","title":"What can I contribute?","text":"<p>We don't have any specific guidelines on what you can contribute, but the most welcome contributions are:</p> <ul> <li>Bug fixes</li> <li>Unsafe memory access fixes</li> <li>Code refactoring</li> <li>Documentation improvements</li> </ul> <p>New features are also welcome, but please discuss them with the maintainers first. You can find contact to maintainers on the Home page.</p>"},{"location":"developer-guide/contributing/#how-to-contribute","title":"How to contribute?","text":"<ol> <li>Create a new branch from the <code>main</code> branch on your fork.    We recommend naming the branch after the issue you are working on with a prefix <code>feature/</code>,    <code>bugfix/</code>, <code>docs/</code>, etc. For example, <code>bugfix/unsafe_memory_access</code>.</li> <li>Make your changes.</li> <li>Test your changes.</li> <li>Commit your changes.</li> <li>Push your changes to your fork.</li> <li>Create a pull request to the <code>main</code> branch of the main repository from your fork.</li> </ol>"},{"location":"developer-guide/contributing/#code-review","title":"Code Review","text":"<p>After you create a pull request, the maintainers will review your changes and provide feedback. You may need to make additional changes before your pull request is accepted.</p> <p>If you have any questions, feel free to ask them in the pull request or contact the maintainers directly. In case you can't do the changes yourself, let us know, and we will help you by providing guidance or doing the changes ourselves (you will still be credited as a contributor).</p> <p>If we don't accept your pull request, don't be discouraged. We will provide feedback on why it was rejected.</p> <p>If you don't get any feedback for a long time, feel free to ping the maintainers in the pull request.</p> <p>If we haven't heard from you for more than 21 days, we may close the pull request or take it over and finish it ourselves.</p>"},{"location":"developer-guide/contributing/#branching-merging-model","title":"Branching &amp; Merging Model","text":"<p>We use the Trunk-Based Development model for branching and Squash Merging for merging. This means that:</p> <ul> <li>You have to branch from the <code>main</code> branch.</li> <li>Your commits are squashed into a single commit before merging.</li> <li>You can't branch from other branches than <code>main</code> or you will get a merge conflict.</li> <li>Your branch is deleted after merging.</li> </ul> <p>This model is chosen to keep the repository clean and make it easier to maintain.</p> <p>In special cases, we may create a separate trunk for some features if they are too big or too risky to be developed in the main trunk. In this case the trunk will be named <code>trunk/FEATURE_NAME</code> and will be merged back to the main trunk after the feature is finished. All the rules from the Trunk-Based Development model still apply but to the feature trunk instead of the main trunk.</p>"},{"location":"developer-guide/contributing/#license","title":"License","text":"<p>By contributing to the project, you agree to license your contributions under the project's license. You grant the project maintainers a non-exclusive, irrevocable, worldwide, royalty-free, sublicensable, transferable license to use, reproduce, modify, prepare derivative works of, distribute, publicly perform, publicly display, and otherwise exploit your contributions<sup>1</sup>.</p> <ol> <li> <p>Legal to human: that just means you can't say \"stop using my code\" after you contributed it, we don't owe you, anything, and we can do whatever we want with your code. You are stil the code author, though, and we can't remove your name from the list of contributors or claim that we wrote the code you contributed.\u00a0\u21a9</p> </li> </ol>"},{"location":"developer-guide/release/","title":"Release","text":"<p>Release of a new version can be performed only by the project's maintainers after accumulating enough changes.</p>"},{"location":"developer-guide/release/#versioning","title":"Versioning","text":"<p>We follow Semantic Versioning 2.0.0.</p> <p>As long as we stay on MAJOR = 0, the rules of version bumping are liberal, and we can bump MINOR only on finalized milestone features, while using PATCH for small features and bugfixes.</p>"},{"location":"developer-guide/release/#release-build","title":"Release Build","text":"<p>To create a Release Build, the maintainer creates a tag on <code>main</code> branch with the version and pushes it.</p> <pre><code>git tag v1.2.3\ngit push --tags\n</code></pre> <p>GitHub Actions workflow will start and create a draft release on GitHub. The maintainer reviews the release and publishes it manually.</p>"},{"location":"developer-guide/release/#release-workflow-failure","title":"Release Workflow Failure","text":"<p>If the workflow fails, we have to fix it and clean up unused tags.</p> <ol> <li>Remove tag from GitHub using the UI.</li> <li>Remove local tag: <code>git tag -d v1.2.3</code></li> <li>Create tag again: <code>git tag v1.2.3</code></li> <li>Push tags again: <code>git push --tags</code></li> </ol>"},{"location":"developer-guide/release/#non-release-builds","title":"Non-Release Builds","text":"<p>It's also possible to create GitHub releases that don't count as an official Release. Such a build must have a version suffix like <code>v1.2.3-rc1</code>. To create a Non-Release Build, follow the same rules as with Release Build but create a tag with a suffix.  </p>"},{"location":"developer-guide/style-guide/","title":"Style Guide","text":""},{"location":"developer-guide/style-guide/#code-style","title":"Code Style","text":"<p>Use <code>.clang-format</code> to format your code. You can find the configuration file in the root of the repository.</p> Naming Rules <ul> <li>use <code>UPPERCASE</code> for constants, macros, and preprocessor directives</li> <li>use <code>PascalCase</code> for classes, structs, enums, and namespaces</li> <li>use <code>PascalCase</code> for methods and properties</li> <li>use <code>PascalCase</code> for functions</li> <li>use <code>kebabCase</code> for local variables</li> <li>prefix private fields with <code>m_</code></li> <li>prefix static fields with <code>s_</code></li> <li>prefix static variables with <code>s_</code></li> <li>prefix global variables with <code>g_</code></li> </ul> Other Rules <ul> <li>use <code>#pragma once</code> instead of include guards</li> <li>use the same namespace as the folder structure<ul> <li>excluding <code>Gothic</code> directory which has <code>GOTHIC_NAMESPACE</code> defined (subdirectories should use new namespace)</li> <li>excluding <code>Hooks.hpp</code> files, which may need <code>GOTHIC_NAMESPACE</code> to implement member functions</li> </ul> </li> <li>prefer single class per file</li> <li>use the same file name as the class name</li> <li>use <code>#pragma region</code> and <code>#pragma endregion</code> to group related code for bigger files</li> <li>don't use <code>using namespace</code> in header files</li> <li>can use <code>using namespace</code> in source files</li> <li>don't use <code>using namespace std</code> in any file</li> <li>avoid use <code>using namespace X;</code> where X is a namespace of vendor code</li> <li>can use <code>using namespace X;</code> where X is the project namespace</li> </ul>"},{"location":"developer-guide/style-guide/#design-principles","title":"Design Principles","text":""},{"location":"developer-guide/style-guide/#separation-of-concerns","title":"Separation of Concerns","text":"<p>Code should be modular, and every unit should encapsulate its private state, while providing a public interface for others to use. Each unit should have a single responsibility. Each unit group should also represent a single, larger concept being the aggregate of member concepts.</p>"},{"location":"developer-guide/style-guide/#keep-it-stupid-simple-kiss","title":"Keep It Stupid Simple (KISS)","text":"<p>Code should be simple and easy to understand. Don't overengineer, don't over-abstract, don't generalize specializations that already provide everything you need.</p>"},{"location":"developer-guide/style-guide/#memory-pointers","title":"Memory &amp; Pointers","text":"<p>Pointers of objects shared between multiple consumers are created and managed by an owner. The owner shares the object as a const reference or a reference if the object must be mutable.</p> <p>Objects may be owner-less if shared using std::shared_ptr.</p> <p>Don't dereference a reference unless you absolutely have to.</p>"},{"location":"developer-guide/style-guide/#gothicunion","title":"Gothic/Union","text":"<ul> <li>Code builds for every engine: G1, G1A, G2, G2A</li> </ul>"},{"location":"developer-guide/style-guide/#hooks","title":"Hooks","text":"<ul> <li>Prefer PartialHook if you don't need to wrap the target function from both sides.</li> <li>PartialHook: avoid subtracting esp further than the current function frame. Different callers will have different   stack offsets.</li> </ul>"},{"location":"developer-guide/style-guide/#would-you-add-or-change-something","title":"Would you add or change something?","text":"<p>The style guide is not set in stone. If you think that we should add or alter some rules, feel free to contribute.</p>"},{"location":"reference/","title":"Reference","text":""},{"location":"reference/#classes","title":"Classes","text":"<ul> <li>C_MUSICTHEME</li> <li>C_BassMusic_Theme</li> <li>C_BassMusic_ThemeAudio</li> </ul>"},{"location":"reference/#globals","title":"Globals","text":"<ul> <li>BassMusic_ActiveThemeFilename</li> <li>BassMusic_ActiveThemeID</li> <li>BassMusic_EventThemeFilename</li> <li>BassMusic_EventThemeID</li> </ul>"},{"location":"reference/#externals","title":"Externals","text":"<ul> <li>BassMusic_Play</li> <li>BassMusic_SetFullScriptControl</li> <li>BassMusic_OnEndEvent</li> <li>BassMusic_OnTransitionEvent</li> <li>BassMusic_OnChangeEvent</li> <li>BassMusic_Opt_TransitionTime</li> <li>BassMusic_Opt_ForceDisableReverb</li> <li>BassMusic_Opt_ForceFadeTransition</li> <li>BassMusic_AddMidiFile</li> <li>BassMusic_AddTransitionTimePoint</li> <li>BassMusic_AddJingle</li> </ul>"},{"location":"reference/#options-ini","title":"Options (.ini)","text":"<ul> <li>[BassMusic] TransitionTime</li> <li>[BassMusic] ForceDisableReverb</li> <li>[BassMusic] ForceFadeTransition</li> <li>[BassMusic] CreateMainParserCMusicTheme</li> <li>[BassMusic] LoggerLevelUnion</li> <li>[BassMusic] LoggerLevelZSpy</li> </ul>"},{"location":"reference/classes/C_BassMusic_Theme/","title":"C_BassMusic_Theme","text":""},{"location":"reference/classes/C_BassMusic_Theme/#description","title":"Description","text":"<p>The class represents a music theme with zBassMusic extensions that can be played by the plugin.</p>"},{"location":"reference/classes/C_BassMusic_Theme/#definition","title":"Definition","text":"<pre><code>const int BASSMUSIC_THEME_TYPE_NORMAL = 0;\n\nclass C_BassMusic_Theme {\n    var string name;\n    var string zones;\n    var int type;\n};\n\nprototype BassMusic_Theme(C_BassMusic_Theme) {\n    type = BASSMUSIC_THEME_TYPE_NORMAL;\n};\n</code></pre>"},{"location":"reference/classes/C_BassMusic_Theme/#fields","title":"Fields","text":"Field Type Description name string The name (identifier) of a theme. zones string Comma-separated list of zones which play this theme (e.g. \"SYS_MENU,OC_DAY_STD\"). type int Reserved for future use. Set it to BASSMUSIC_THEME_TYPE_NORMAL for now. type Value Type BASSMUSIC_THEME_TYPE_NORMAL 0 The normal type."},{"location":"reference/classes/C_BassMusic_ThemeAudio/","title":"C_BassMusic_ThemeAudio","text":""},{"location":"reference/classes/C_BassMusic_ThemeAudio/#description","title":"Description","text":"<p>The class represents an audio file assigned to a music theme.</p>"},{"location":"reference/classes/C_BassMusic_ThemeAudio/#definition","title":"Definition","text":"<pre><code>class C_BassMusic_ThemeAudio {\n    var string theme;\n    var string type;\n    var string filename;\n    var string midifile;\n    var float volume;\n    var int loop;\n    var float loopStart;\n    var float loopEnd;\n    var int reverb;\n    var float reverbMix;\n    var float reverbTime;\n    var int fadeIn;\n    var int fadeInDuration;\n    var int fadeOut;\n    var int fadeOutDuration;\n};\n\nprototype BassMusic_ThemeAudio(C_BassMusic_ThemeAudio) {\n    type = \"DEFAULT\";\n    volume = 1;\n    loop = 1;\n    reverb = 0;\n    fadeIn = 1;\n    fadeInDuration = 2000;\n    fadeOut = 1;\n    fadeOutDuration = 2000;\n};\n</code></pre>"},{"location":"reference/classes/C_BassMusic_ThemeAudio/#fields","title":"Fields","text":"Field Type Description theme string The name (identifier) of a theme. type string Type of the audio. Use \"DEFAULT\" to play it as music. filename string Filename of the audio file. midifile string Filename of a MIDI file for transition control. vol float Volume of the song in range [0, 1] as the % of master volume. loop int (bool) If not zero, the theme will loop. Otherwise, it will play only once per zone enter. loopStart float Loop start position in seconds. loopEnd float Loop end position in seconds. reverb int (bool) If not zero, the Reverb DX8 effect is enabled. reverbmix float Mix property for Reverb DX8 effect in range [-96, 0] dB. reverbtime float Time property for Reverb DX8 effect in range [0.001, 3000] ms. fadeIn int (bool) If not zero, the fade-in effect is enabled. fadeInDuration float Fade-in effect duration in milliseconds. fadeOut int (bool) If not zero, the fade-out effect is enabled. fadeOutDuration float Fade-out effect duration in milliseconds."},{"location":"reference/classes/C_MUSICTHEME/","title":"C_MUSICTHEME","text":""},{"location":"reference/classes/C_MUSICTHEME/#description","title":"Description","text":"<p>The class represents a music theme that can be played by the plugin.</p>"},{"location":"reference/classes/C_MUSICTHEME/#definition","title":"Definition","text":"<pre><code>class C_MUSICTHEME\n{\n    var string file;\n    var float vol;\n    var int loop;\n    var float reverbmix;\n    var float reverbtime;\n    var int transtype;\n    var int transsubtype;\n};\n\nprototype C_MUSICTHEME_DEF(C_MUSICTHEME)\n{\n    vol = 1;\n    loop = 1;\n    transtype = TRANSITION_TYPE_NONE;\n    transsubtype = TRANSITION_SUB_TYPE_MEASURE;\n    reverbmix = -80;\n    reverbtime = 9000;\n};\n</code></pre>"},{"location":"reference/classes/C_MUSICTHEME/#fields","title":"Fields","text":"Field Type Description file string The filename of an audio file. vol float Volume of the song in range [0, 1] as the % of master volume. loop int (bool) If not zero, the theme will loop. Otherwise, it will play only once per zone enter. reverbmix float Mix property for Reverb DX8 effect in range [-96, 0] dB. reverbtime float Time property for Reverb DX8 effect in range [0.001, 3000] ms. transtype int Transition type. Check the table below. transsubtype int Ignored. transtype Value Transition TRANSITION_TYPE_NONE 1 Ignored. TRANSITION_TYPE_GROOVE 2 Ignored. TRANSITION_TYPE_FILL 3 Ignored. TRANSITION_TYPE_BREAK 4 Ignored. TRANSITION_TYPE_INTRO 5 Enables fade-in transition with the duration form [BassMusic].TransitionTime ini option. TRANSITION_TYPE_END 6 Enables fade-out transition with the duration form [BassMusic].TransitionTime ini option. TRANSITION_TYPE_ENDANDINTRO 7 Enables both fade-in and fade-out transition with the duration form [BassMusic].TransitionTime ini option."},{"location":"reference/externals/","title":"Externals","text":""},{"location":"reference/externals/#bassmusic_play","title":"BassMusic_Play","text":"<p>Triggers an event to start a new music theme. If the player has turned off the music in the menu, the theme will not be played.</p> <pre><code>func void BassMusic_Play(var string id)\n</code></pre> <p>Parameters</p> <ul> <li><code>var string id</code>   Symbol name of the music theme (C_MUSICTHEME) to play</li> </ul>"},{"location":"reference/externals/#bassmusic_setfullscriptcontrol","title":"BassMusic_SetFullScriptControl","text":"<p>Set the \"Full Script Control\"</p> <pre><code>func void BassMusic_SetFullScriptControl(int enabled) {}\n</code></pre> <p>Parameters</p> <ul> <li><code>var int enabled</code>   Boolean value if full script control should be enabled.</li> </ul>"},{"location":"reference/externals/#bassmusic_onendevent","title":"BassMusic_OnEndEvent","text":"<p>Set a callback function to be called when the music ends.</p> <pre><code>func void BassMusic_OnEndEvent(var func callback) {}\n</code></pre> <p>Parameters</p> <ul> <li><code>var func callback</code>   Callback function to be called when the music ends with signature: <code>func void callback();</code></li> </ul>"},{"location":"reference/externals/#bassmusic_ontransitionevent","title":"BassMusic_OnTransitionEvent","text":"<p>Set a callback function to be called when the music is close to the end and transition starts.</p> <pre><code>func void BassMusic_OnTransitionEvent(var func callback) {}\n</code></pre> <p>Parameters</p> <ul> <li><code>var func callback</code>   Callback function to be called when the music is close to the end and transition starts: <code>func void callback(var float time_left_ms);</code></li> </ul>"},{"location":"reference/externals/#bassmusic_onchangeevent","title":"BassMusic_OnChangeEvent","text":"<p>Set a callback function to be called when the music changes.</p> <pre><code>func void BassMusic_OnChangeEvent(var func callback) {}\n</code></pre> <p>Parameters</p> <ul> <li><code>var func callback</code>   Callback function to be called when the music changes with signature: <code>func void callback();</code></li> </ul>"},{"location":"reference/externals/#bassmusic_opt_transitiontime","title":"BassMusic_Opt_TransitionTime","text":"<p>Set [Bass].TransitionTime ini setting.</p> <pre><code>func void BassMusic_Opt_TransitionTime(var float time) {}\n</code></pre> <p>Parameters</p> <ul> <li><code>var float time</code>   The transition time in miliseconds</li> </ul>"},{"location":"reference/externals/#bassmusic_opt_forcedisablereverb","title":"BassMusic_Opt_ForceDisableReverb","text":"<p>Set [Bass].ForceDisableReverb ini setting.</p> <pre><code>func void BassMusic_Opt_ForceDisableReverb(var int enabled) {}\n</code></pre> <p>Parameters</p> <ul> <li><code>var int enabled</code>   If true, the reverb effect is globally disabled</li> </ul>"},{"location":"reference/externals/#bassmusic_opt_forcefadetransition","title":"BassMusic_Opt_ForceFadeTransition","text":"<p>Set [Bass].ForceFadeTransition ini setting.</p> <pre><code>func void BassMusic_Opt_ForceFadeTransition(var int enabled) {}\n</code></pre> <p>Parameters</p> <ul> <li><code>var int enabled</code>   If true, the fade transition is globally enabled</li> </ul>"},{"location":"reference/externals/#bassmusic_addmidifile","title":"BassMusic_AddMidiFile","text":"<p>Add a MIDI File to a theme.</p> <pre><code>func void BassMusic_AddMidiFile(var string theme, var string filter, var string midiFilename) {}\n</code></pre> <p>Parameters</p> <ul> <li><code>var string theme</code>   Music theme name</li> <li><code>var string filter</code> Transition filter</li> <li><code>var string midiFilename</code>   Filename of a MIDI file</li> </ul>"},{"location":"reference/externals/#bassmusic_addtransitiontimepoint","title":"BassMusic_AddTransitionTimePoint","text":"<p>Add a time point for Timing Transition.</p> <pre><code>func void BassMusic_AddTransitionTimePoint(var string theme, var string filter, var float start, var float duration, var int effect, var float nextStart, var float nextDuration, var int nextEffect) {}\n</code></pre> <p>Parameters</p> <ul> <li><code>var string theme</code>   Music theme name</li> <li><code>var string filter</code> Transition filter</li> <li><code>var float start</code>   Transition start in seconds</li> <li><code>var float duration</code>   Transition duration in seconds</li> <li><code>var int effect</code>   Effect ID (NONE = 0, CROSSFADE = 0)</li> <li><code>var float nextStart</code>   Transition start in seconds (next song)</li> <li><code>var float nextDuration</code>   Transition duration in seconds (next song)</li> <li><code>var int nextEffect</code>   Effect ID (NONE = 0, CROSSFADE = 0)</li> </ul>"},{"location":"reference/externals/#bassmusic_addjingle","title":"BassMusic_AddJingle","text":"<p>Add a Jingle to a theme.</p> <pre><code>func void BassMusic_AddJingle(var string theme, var string filter, var string jingle, var float delay) {}\n</code></pre> <p>Parameters</p> <ul> <li><code>var string theme</code>   Music theme name</li> <li><code>var string filter</code> Transition filter</li> <li><code>var string jingle</code>   Filename of a jingle audio file</li> <li><code>var float delay</code>   Delay in seconds before the jingle starts</li> </ul>"},{"location":"reference/globals/","title":"Globals","text":""},{"location":"reference/globals/#bassmusic_activethemefilename","title":"BassMusic_ActiveThemeFilename","text":"<p>Holds the filename of the currently active theme.</p> <pre><code>var string BassMusic_ActiveThemeFilename;\n</code></pre>"},{"location":"reference/globals/#bassmusic_activethemeid","title":"BassMusic_ActiveThemeID","text":"<p>Holds the ID (symbol name) of the currently active theme.</p> <pre><code>var string BassMusic_ActiveThemeID;\n</code></pre>"},{"location":"reference/globals/#bassmusic_eventthemefilename","title":"BassMusic_EventThemeFilename","text":"<p>Holds the filename of the theme for current event.</p> <pre><code>var string BassMusic_EventThemeFilename;\n</code></pre>"},{"location":"reference/globals/#bassmusic_eventthemeid","title":"BassMusic_EventThemeID","text":"<p>Holds the ID (symbol name) of the theme for current event.</p> <pre><code>var string BassMusic_EventThemeID;\n</code></pre>"},{"location":"reference/options/","title":"Options (.ini)","text":"<p>Options are defined under <code>[BassMusic]</code> sction.</p>"},{"location":"reference/options/#transitiontime","title":"TransitionTime","text":"<p>The time of the crossfade transition in milliseconds.</p> <pre><code>TransitionTime=2000\n</code></pre>"},{"location":"reference/options/#forcedisablereverb","title":"ForceDisableReverb","text":"<p>If true, all reverb effects are disabled.</p> <pre><code>ForceDisableReverb=0\n</code></pre>"},{"location":"reference/options/#forcefadetransition","title":"ForceFadeTransition","text":"<p>If true, all transitions use cross-fade even if it's not set in the theme.</p> <pre><code>ForceFadeTransition=0\n</code></pre>"},{"location":"reference/options/#createmainparsercmusictheme","title":"CreateMainParserCMusicTheme","text":"<p>If true, the class C_MUSICTHEME is also created within the main scripts' parser and you can define music themes in Content scripts. Be aware that it doesn't provide any sharing between parsers so you can't use instance from music parser in the main parser - then you have to redefine it in the other</p> <p>Danger</p> <p>Music themes defined in the main parser cannot use DirectMusic format.</p> <pre><code>CreateMainParserCMusicTheme=1\n</code></pre>"},{"location":"reference/options/#loggerlevelunion","title":"LoggerLevelUnion","text":"<p>Sets the logger level for Union Console logs</p> <pre><code>LoggerLevelUnion=INFO\n</code></pre>"},{"location":"reference/options/#loggerlevelzspy","title":"LoggerLevelZSpy","text":"<p>Sets the logger level for ZSpy logs</p> <pre><code>LoggerLevelZSpy=DEBUG\n</code></pre>"},{"location":"roadmap/","title":"Roadmap","text":"<p>Done</p> <p>In Progress</p> <p>Waiting in Queue</p> <p>Planned</p>"},{"location":"roadmap/#done","title":"Done","text":"Music Engine (v0.1.0) <p>Music engine capable of replacing the original DM system in the scope of playing audio and switching songs based on game events.</p> Daedalus API for controlling playback (v0.1.0) <p>External functions to take control over music scheduling in Daedalus scripts. API is stable and shouldn't introduce any breaking changes.</p> Simple crossfade (v0.1.0) <p>Every music theme can opt-in for simple fade-in and fade-out transitions to smoothly crossfade changing themes. The crossfade time is  set globally and the transition starts instantly after receiving an event from the game.</p> Transition Scheduler (v0.3.0) <p>Scheduler for executing advanced transitions between songs based on defined rules. The system should be flexible and offer different transition effects behind an easy-to-use interface. The artist should be able to define rules with high precision (soft goal: &lt;10ms latency).</p> Instant Transition (Done) <p>Default transition starts the effect instantly after receiving an event from the game.</p> OnBeat Transition (Done) <p>Transition accepts a list of time points when the transition can happen and schedules it for the closest point. This way the song may  switch exactly in a moment when the beat ends to match the rhythm.</p> Jingle Transition (Done) <p>Transition plays an additional short audio during the transition as a one-time jingle. For example, battle music transitioning into  normal can play some theme to emphasize the end of a fight.</p> MIDI bridge for Transition Scheduler (v0.3.0) <p>The MIDI format is the best option for defining rules for the Transition Scheduler. The composer can just put all the information about the transitions as MIDI events on some muted track in DAW and export it to the plugin. The composer uses a tool he knows, and we can extract precise information from the MIDI file perfectly synchronized with the music.</p> <p>The bridge defines a spec how to interpret MIDI events and how they map to the internal structures of the Transition Scheduler. Then the bridge can load MIDI files and provide the rules to the scheduler.</p>"},{"location":"roadmap/#in-progress","title":"In Progress","text":"Additional Transitions (v0.4.0) <p>Additional transition options based on ideas from the composer. </p>"},{"location":"roadmap/#future-plans","title":"Future Plans","text":"New features? <p>We still may plan to implement some new features if they can provide value.</p> Adaptive Audio <p>Add additional options for setting up adaptive music.</p> Support late injection <p>Right now the plugin hooks early into Gothic initialization to set itself up and replace the <code>zmusic</code> pointer with a custom implementation. We should add support for late initialization and let the plugin be loaded by Daedalus/Ikaus scripts.</p> Complete Product Release (v1.0.0) <p>Before we release version v1.0.0 and mark zBassMusic as a finished product, we need to:</p> <ul> <li>finish all the features in the backlog</li> <li>battle-test the system by having it work in multiple released Gothic mods</li> <li>fix all bugs and crashes that have a meaningful probability of causing Access Violations on players' games</li> </ul>"},{"location":"user-guide/","title":"User Guide","text":"<p>User Guide is the zBassMusic documentation dedicated to people who would like to include the plugin in their mod and use it as a music system. The articles are written in guide style to help you understand the mechanics behind the plugin. For pure reference of available options, you can refer to the Reference page.</p> <p>The available docs are:</p> <ul> <li>Getting Started - basics of zBassMusic, plugin loading, music definition, simple crossfade   effect</li> <li>Concepts - glossary of the terminology used in the plugin</li> <li>Themes - configuration of music themes</li> <li>Transitions - configuration of advanced transitions</li> <li>Scripting (Daedalus) - using zBassMusic in the scripts, creating a custom scheduler</li> <li>Debugging - helpful tips for debugging plugin problems or working with a debugger</li> </ul>"},{"location":"user-guide/concepts/","title":"Concepts","text":""},{"location":"user-guide/concepts/#music-theme","title":"Music Theme","text":"<p>Music Theme is a single song in the game soundtrack. It contains Audio Files, Effects, Transitions and Zones.</p>"},{"location":"user-guide/concepts/#audio-file","title":"Audio File","text":"<p>An audio file with the song or a jingle in a specific format (MP3, WAVE, OPUS, FLAC).  The audio files are placed in <code>_work/Data/Music/</code> directory and referenced by a Music Theme.</p>"},{"location":"user-guide/concepts/#effects","title":"Effects","text":"<p>Effects are the audio effects applied on a song during playback. Supported effects include:</p> <ul> <li>Volume - volume level of the song as a percent of master volume.</li> <li>Reverb DX8 - reverb effects based on DirectX 8 implementation</li> <li>Fade In - fade-in transition when the song starts</li> <li>Fade OUt - fade-out transition when the song ends</li> </ul>"},{"location":"user-guide/concepts/#transitions","title":"Transitions","text":"<p>Rules defining how to schedule the change of a song. Transition may define the time span when change occurs and the effects used to switch thet theme.</p>"},{"location":"user-guide/concepts/#zone","title":"Zone","text":"<p>The area where a song plays. Music zone are created using Spacer and a song may be attached to it.</p>"},{"location":"user-guide/concepts/#vdfs","title":"VDFS","text":"<p>Virtual file system used by Gothic to load assets. zBassMusic supports it fully, and we may reference some directory as:</p> <ul> <li> <p>Physical - Located on your computer hard drive in the Gothic installation directory.</p> </li> <li> <p>Virtual - A .vdf or .mod file loaded by Gothic, they contain the same directory structure as physical,  but all files are inside the file (like a ZIP archive).</p> </li> </ul>"},{"location":"user-guide/debugging/","title":"Debugging","text":"<p>If you encounter any issues with the application, you can use the following tools to help you debug the problem.</p>"},{"location":"user-guide/debugging/#union-console","title":"Union Console","text":"<p>Union can start a console window alongside with Gothic and catch standard output where we print a lot of logs. To enable the console, you need to set following settings in the <code>SystemPack.ini</code> file:</p> <pre><code>[CORE]\nShowDebugWindow = true\nUseDebugWindowHost = true\n</code></pre>"},{"location":"user-guide/debugging/#logging-level","title":"Logging Level","text":"<p>By default, we print only the severity &gt;=INFO to Union Console and &gt;=DEBUG to ZSpy. To print all logs to the console, you can set TRACE logging level in <code>Gothic.ini</code>:</p> <pre><code>[BASSMUSIC]\nLoggerLevelUnion=TRACE\nLoggerLevelZSpy=TRACE\n</code></pre>"},{"location":"user-guide/debugging/#debug-symbols","title":"Debug Symbols","text":"<p>Standard Release build does not contain debug symbols, so you cannot debug the application in the debugger easily because you will see only the optimized assembly code.</p> <p>If you encounter a crash on Release build, please download the builds suffixed with <code>-pdb</code> like <code>zBassMusic-v0.1.4-pdb.zip</code> and replace Release with them. These builds contain debug symbols, and now you can start Gothic with a debugger attached to catch the exception causing the crash and see the source code where it happened. If you get some additional information about the crash from the debugger, please include it in the bug report.</p>"},{"location":"user-guide/getting-started/","title":"Getting Started","text":"<p>To start working with zBassMusic, first we need to download the plugin. We publish all releases on the Releases page, so you can go there and download zBassMusic. Alternatively, below you should see the newest release:</p> <p> </p> <p> </p> <p>There are different kinds of files for different use cases:</p> <ul> <li><code>zBassMusic-{version}.zip</code>ZIP archive with zBassMusic.dll and its dependencies. Use for loading the plugin   directly from the disk.</li> <li><code>zBassMusic-{version}.vdf</code>Gothic VDF volume with zBassMusic.dll and its dependencies packed   under <code>System/Autorun</code>.   It's for loading the plugin using an external loader like Union.</li> <li><code>zBassMusic-{version}-pdb.zip/vdf</code>The same role as above but -pdb builds contain PDB debug symbols.   You can use it if you are going to use a debugger and would like to see the source code instead of assembly for   zBassMusic.</li> </ul> <p>When you download the files, we can proceed to loading the plugin</p>"},{"location":"user-guide/getting-started/cross-fading/","title":"Cross-fading","text":"<p>zBassMusic implements basic fade-in and fade-out effects to crossfade between songs, but it's activated only if the music theme defines a correct <code>transtype</code>. We support:</p> <ul> <li><code>TRANSITION_TYPE_INTRO</code> (= 5) - fade-in effect at the start</li> <li><code>TRANSITION_TYPE_END</code> (= 6) - fade-out effect at the end</li> <li><code>TRANSITION_TYPE_ENDANDINTRO</code> (= 7) - both fade-in and fade-out effects</li> </ul> <p>The best default is to use <code>TRANSITION_TYPE_ENDANDINTRO</code> because it defines both start and end effects. If you had one song with <code>TRANSITION_TYPE_END</code> and another song without <code>TRANSITION_TYPE_INTRO</code>, then during the transition the first sound would fade out but the second one would start instantly at 100% volume.</p> <pre><code>prototype C_MUSICTHEME_FIGHT(C_MUSICTHEME)\n{\n    file = \"My_Super_Music.mp3\"; \n\n    // Use TRANSITION_TYPE_ENDANDINTRO to enable crossfade between themes\n    transtype = TRANSITION_TYPE_ENDANDINTRO;\n    transsubtype = TRANSITION_SUB_TYPE_MEASURE;\n    reverbmix = -12;\n    reverbtime = 9000;\n    vol = 1;\n    loop = 1;\n};\n</code></pre> <p>Other values of <code>transtype</code> and all values of <code>transsubtype</code> are ignored because zBassMusic can't emulate them on arbitrary audio files with no MIDI metadata.</p> <p>Instead of trying to emulate DirectMusic effects, we implement our own transition scheduler to perform advanced transitions.  To learn more you can check next:</p> <ul> <li>zBassMusic Theme Class - an extended version of <code>C_MUSICTHEME</code> class made specifically for zBassMusic.     You can use it instead of the Gothic's one to enable additional features.</li> <li>Transitions - the new transition system that gives you a full control over how music changes.     You can set up custom timing, add an in-between jingle sound or use a MIDI file to provide metadata for the engine.     With a well-prepared transitions, your music will hit better. Like, literally - it will hit on the beat.</li> <li>Scripting - external functions to control the music playback from Daedalus scripts. You can use it     to implement a special theme flow for specific moments in the story.  </li> </ul>"},{"location":"user-guide/getting-started/music-definition/","title":"Music Definition","text":"<p>zBassMusic uses the same music definitions as the original game, so you can work directly on existing <code>C_MUSICTHEME</code> instances. The instances are in <code>Scripts/System/Music/MusicInst.d</code>.</p> <pre><code>prototype C_MUSICTHEME_FIGHT(C_MUSICTHEME)\n{\n    // With zBassMusic you can load mp3 and other music formats\n    file = \"My_Super_Music.mp3\"; \n\n    // Use TRANSITION_TYPE_ENDANDINTRO to enable crossfade between themes\n    transtype = TRANSITION_TYPE_ENDANDINTRO;\n    transsubtype = TRANSITION_SUB_TYPE_MEASURE;\n\n    // reverbmix and reverbtime might have to be adjusted\n    reverbmix = -12;\n    reverbtime = 9000;\n    vol = 1;\n    loop = 1;\n};\n</code></pre>"},{"location":"user-guide/getting-started/music-definition/#caveat-reverb-effect","title":"Caveat: Reverb Effect","text":"<p>zBassMusic emulates the original reverb effects using <code>BASS_DX8_REVERB</code> from BASS library but it has strict limits on the acceptable parameters range. If you would like to use the effect, make sure that:</p> <ul> <li><code>reverbmix</code> is in range <code>[-96, 0]</code></li> <li><code>reverbtime</code> is in range <code>[0.001, 3000]</code></li> </ul> <p>If the parameter value is outside these ranges, the effect won't be applied.</p>"},{"location":"user-guide/getting-started/plugin-loading/","title":"Plugin Loading","text":"<p>The next step is loading zBassMusic.dll to the Gothic memory, so it activates. There are several ways of doing it depending on your environment and expectations. Some methods are global for the whole Gothic installation where the plugin will always load indifferently if you start mod A, mod B or the original game. Other methods make it possible to isolate the plugin to a single mod, so it doesn't mess with others.</p> <p>During the development, it's fine to use global methods on a local installation but when you are going to ship the mod to other players, you should select an option with isolation.  You never know if the player has a clean Gothic only for your mod or a giga-directory with hundreds of GothicStarter entries, so you don't want to break someone's game by loading unsolicited DLLs globally.</p>"},{"location":"user-guide/getting-started/plugin-loading/#union-10m","title":"Union 1.0m","text":"<p>This method requires the player to install Union. Good option if your mod already uses other Union plugins and the runtime is there.</p> Global Method <p>Choose either ZIP or VDF. Both work the same.</p> <p>From ZIP release: Copy <code>zBassMusic.dll</code>, <code>UnionAPI.dll</code>, <code>bass.dll</code>, <code>bassmidi.dll</code>, <code>bassopus.dll</code>, <code>bassflac.dll</code>  To <code>&lt;GOTHIC_DIR&gt;/System/Autorun/</code></p> <p>From VDF release: Copy <code>zBassMusic.vdf</code>  To <code>&lt;GOTHIC_DIR&gt;/Data/</code></p> Isolated Method <p>The isolated method is possible if you are placing your mod in <code>&lt;GOTHIC_DIR&gt;/Data/ModVDF</code> and declare .mod file in <code>YourMod.ini</code>.</p> <p>From VDF release: Rename <code>zBassMusic.vdf</code> to <code>zBassMusic.mod</code> Copy <code>zBassMusic.mod</code> To <code>&lt;GOTHIC_DIR&gt;/Data/ModVDF/</code></p> <p>In <code>YourMod.ini</code> add an additional file to [FILES].VDF key:</p> <pre><code>[FILES]\n; NOTICE DOUBLE SPACE!\n; If you use multiple VDF files, \n; you have to separate them with TWO spaces\nVDF=YourMod.mod  zBassMusic.mod \n</code></pre>"},{"location":"user-guide/getting-started/plugin-loading/#standalone-system-pack","title":"Standalone System Pack","text":"<p>It's possible to load zBassMusic on a clean Gothic with only System Pack using <code>pre.load</code> file but it's always global.</p> Global Method <p>From ZIP release: Copy <code>zBassMusic.dll</code>, <code>UnionAPI.dll</code>, <code>bass.dll</code>, <code>bassmidi.dll</code>, <code>bassopus.dll</code>, <code>bassflac.dll</code>  To <code>&lt;GOTHIC_DIR&gt;/System/</code></p> <p>Create <code>pre.load</code> file in <code>&lt;GOTHIC_DIR&gt;/System/</code> with content: <pre><code>zBassMusic.dll\n</code></pre></p>"},{"location":"user-guide/getting-started/plugin-loading/#standalone-ikarus","title":"Standalone Ikarus","text":"<p>Not supported now</p> <p>In the current release, we are hooking early into Gothic initialization, so Ikarus would load the plugin too late. In future releases, we may provide an alternative initialization that would be possible at any moment.</p> <p>If you are using Ikarus in your scripts, it's possible to load dynamically any DLL using <code>LoadLibrary(\"AnyLib.dll\")</code> function. The function is conveniently provided by Ikarus and this method is always isolated.</p> Isolated Method <p>From ZIP release: Copy <code>zBassMusic.dll</code>, <code>UnionAPI.dll</code>, <code>bass.dll</code>, <code>bassmidi.dll</code>, <code>bassopus.dll</code>, <code>bassflac.dll</code>  To <code>&lt;GOTHIC_DIR&gt;/System/</code></p> <p>In your <code>Startup.d</code> add to Init: <pre><code>func void INIT_GLOBAL()\n{\n    Game_InitGerman();\n    LoadLibrary(\"zBassMusic.dll\");\n    // ...\n}\n</code></pre></p>"},{"location":"user-guide/getting-started/plugin-loading/#validate","title":"Validate","text":"<p>To check if zBassMusic was loaded you can either look into ZSpy for strings like:</p> <pre><code>zBassMusic 0.1.3 Release (build: 2024-05-20T10:21:26, branch: feature/cleanup, revision: 466f67cedf3c23bfb6aa555f90653f67bb61742a)\n</code></pre> <p>Alternatively, you can try to call one of the externals in your Daedalus scripts, for example:</p> <pre><code>    func void INIT_GLOBAL()\n    {   \n        BassMusic_SetFullScriptControl(false);\n        // ...\n    }\n</code></pre> <p>If you get an error about missing external, then zBassMusic wasn't loaded, so you have to double-check if the chosen loading method was executed correctly. If you don't see any error, that means everything is fine and we can proceed to music definitions.</p>"},{"location":"user-guide/scripting/","title":"Scripting (Daedalus)","text":"<p>The plugin defines several external functions that let us interact with the Music Engine from Daedalus scripts. The full list of available functions can be found in the Reference page, and here we will cover only the \"Full Script Control\" mode.</p>"},{"location":"user-guide/scripting/#full-script-control","title":"Full Script Control","text":"<p>You can enable the Full Script Control mode in scripts to disable automatic music scheduling based on music zones and play your own music themes without any interference from the standard mechanism.</p> <pre><code>BassMusic_SetFullScriptControl(true);\n</code></pre> <p>When the Full Script Control mode is enabled, the plugin will not play any music themes automatically and you have to do it yourself using the <code>BassMusic_Play</code> function.</p> <pre><code>BassMusic_Play(\"MyTheme\");\n</code></pre> <p>When you are done with the custom music playback, you can disable the Full Script Control mode and get the original schedulers back.</p> <pre><code>BassMusic_SetFullScriptControl(false);\n</code></pre>"},{"location":"user-guide/scripting/#global-variables","title":"Global variables","text":"<p>You can access currently playing music theme using global variables.</p> <pre><code>var string BassMusic_ActiveThemeFilename;   // eg. OLD_CAMP.mp3\nvar string BassMusic_ActiveThemeID;         // eg. OLD_CAMP\n</code></pre>"},{"location":"user-guide/scripting/#events","title":"Events","text":"<p>You can handle some music events in the scripts by registering a callback function.</p>"},{"location":"user-guide/scripting/#onend","title":"OnEnd","text":"<pre><code>func void OnEnd() {\n    // Do something when the music ends\n};\n\nBassMusic_OnEndEvent(OnEnd);\n</code></pre>"},{"location":"user-guide/scripting/#ontransition","title":"OnTransition","text":"<pre><code>func void OnTransition(var int time_left_ms) {\n    // Do something when the transition is about to happen\n    // time_left_ms is the time left to the end of the current\n};\n\nBassMusic_OnTransitionEvent(OnTransition);\n</code></pre>"},{"location":"user-guide/scripting/#onchange","title":"OnChange","text":"<pre><code>func void OnChange() {\n    // Do something when the music theme changes\n};\n\nBassMusic_OnChangeEvent(OnChange);\n</code></pre>"},{"location":"user-guide/scripting/#options","title":"Options","text":"<p>Some .ini options can be set from the scripts. It may be useful if you are taking full control over the music playback.</p> <pre><code>func void BassMusic_Opt_TransitionTime(var float time) {};\nfunc void BassMusic_Opt_ForceDisableReverb(var int enabled) {};\nfunc void BassMusic_Opt_ForceFadeTransition(var int enabled) {};\n</code></pre>"},{"location":"user-guide/scripting/custom-scheduler/","title":"Custom Scheduler","text":"<p>Example of a custom scheduler that plays [OLD_CAMP, NEW_CAMP, SWAMP_CAMP] in a loop. The event handler listens for transition start and schedules next theme based on the current one.</p> <pre><code>void OnTransition(var float time_left) {\n    if (Hlp_StrCmp(BassMusic_ActiveThemeID, \"OLD_CAMP\") == 0) {\n        BassMusic_Play(\"NEW_CAMP\");\n    } else if (Hlp_StrCmp(BassMusic_ActiveThemeID, \"NEW_CAMP\") == 0) {\n        BassMusic_Play(\"SWAMP_CAMP\");\n    } else if (Hlp_StrCmp(BassMusic_ActiveThemeID, \"SWAMP_CAMP\") == 0) {\n        BassMusic_Play(\"OLD_CAMPP\");\n    }\n}; \n\nvoid INIT_GLOBAL() {\n    Game_InitGerman();\n\n    BassMusic_SetFullScriptControl(true);\n    BassMusic_OnTransitionEvent(OnTransition);\n    BassMusic_Play(\"OLD_CAMP\"); \n};\n</code></pre>"},{"location":"user-guide/theme-definition/","title":"Themes","text":"<p>Music Theme is a single song in the soundtrack that needs to be defined in the music scripts for zBassMusic to know about. Each theme has an audio file that needs to be placed inside <code>_work/Data/Music/</code> directory (physical or virtual).</p> <p>You can define a theme using either:</p> <ul> <li>C_MUSICTHEME - original class from Gothic, limited to basic settings</li> <li>zBassMusic Theme - new class for defining advanced settings in zBassMusic</li> </ul>"},{"location":"user-guide/theme-definition/basstheme/","title":"zBassMusic Theme","text":"<p>zBassMusic defines custom classes for music themes to support additional information. In order to use it, place following code in your music scripts, for example in <code>System/Music/MusicInst.d</code>.</p> <pre><code>const int BASSMUSIC_THEME_TYPE_NORMAL = 0;\n\nclass C_BassMusic_Theme {\n    var string name;\n    var string zones;\n    var int type;\n};\n\nclass C_BassMusic_ThemeAudio {\n    var string theme;\n    var string type;\n    var string filename;\n    var string midifile;\n    var float volume;\n    var int loop;\n    var float loopStart;\n    var float loopEnd;\n    var int reverb;\n    var float reverbMix;\n    var float reverbTime;\n    var int fadeIn;\n    var int fadeInDuration;\n    var int fadeOut;\n    var int fadeOutDuration;\n};\n\nprototype BassMusic_Theme(C_BassMusic_Theme) {\n    type = BASSMUSIC_THEME_TYPE_NORMAL;\n};\n\nprototype BassMusic_ThemeAudio(C_BassMusic_ThemeAudio) {\n    type = \"DEFAULT\";\n    volume = 1;\n    loop = 1;\n    reverb = 0;\n    fadeIn = 1;\n    fadeInDuration = 2000;\n    fadeOut = 1;\n    fadeOutDuration = 2000;\n};\n</code></pre> <p>To define a music theme you can create an instance of <code>BassMusic_Theme</code> prototype and also a default audio file using <code>BassMusic_ThemeAudio</code> prototype.</p> <pre><code>instance MyCustomTheme(BassMusic_Theme)\n{\n    name = \"MyCustomTheme\";\n    zones = \"SYS_MENU,OC_DAY_STD\";\n};\n\ninstance MyCustomTheme_Audio(BassMusic_ThemeAudio)\n{\n    theme = \"MyCustomTheme\";\n    filename = \"SYS_MENU.mp3\";\n};\n</code></pre> <p>Theme defines zones to play in as a comma-separated list in <code>zones</code> field.  We treat both the zone (e.g. OC_DAY) and variant (e.g. STD) as a single entity. Each theme variant would use a separate instance.</p> <p>The audio <code>theme</code> field must be the same as theme's <code>name</code> to assign it for this theme. </p> <p>The audio instance must  use <code>DEFAULT</code> as a <code>type</code>, in order to play.  In the future, we may introduce features that use multiple files per theme, hence this separation.</p> <p>The <code>filename</code> field contains the name of the file that should be played in the custom theme.  Note that when using Union, only the filename should be provided, regardless of whether it is located in subdirectories  of the Music folder.</p> <p>When <code>loop</code> is enabled, additionally <code>loopStart</code> and <code>loopEnd</code> can be specified to define the loop region in seconds.</p>"},{"location":"user-guide/theme-definition/cmusictheme/","title":"C_MUSICTHEME","text":"<p>Original Gothic class for music is defined in <code>System/_Intern/Music.d</code> script. You can create its instances to define music themes for zBassMusic.</p> <pre><code>class C_MUSICTHEME\n{\n    var string file;\n    var float vol;\n    var int loop;\n    var float reverbmix;\n    var float reverbtime;\n    var int transtype;\n    var int transsubtype;\n};\n\nprototype C_MUSICTHEME_DEF(C_MUSICTHEME)\n{\n    vol = 1;\n    loop = 1;\n    transtype = TRANSITION_TYPE_NONE;\n    transsubtype = TRANSITION_SUB_TYPE_MEASURE;\n    reverbmix = -80;\n    reverbtime = 9000;\n};\n</code></pre> <p>To define a music theme using this class, you create an instance in <code>System/Music/MusicInst.d</code> script. The name of an instance must be the same as the music zone where it plays.</p> <pre><code>// OC_Day_Std = Old Camp, Day, Standard\ninstance OC_Day_Std(C_MUSICTHEME_DEF)\n{\n    file = \"MyCustomMusic.mp3\";\n    transtype = TRANSITION_TYPE_ENDANDINTRO;\n    reverbmix = -12;\n    reverbtime = 3000;\n    vol = 1;\n    loop = 1;\n};\n</code></pre>"},{"location":"user-guide/theme-definition/cmusictheme/#limitations","title":"Limitations","text":"<p>The original class is not detailed enough to use all zBassMusic features. The limitations are:</p> <ul> <li>The instance name must match music zone + variant. Only one song per music zone + variant is possible.</li> <li><code>reverbmix</code> and <code>reverbtime</code> parameters have a strict restriction on range. zBassMusic will clamp the values to [-96, 0] and [0.001, 3000], respectively.</li> <li><code>transtype</code> and <code>transsubtype</code> are DirectMusic-specific transitions that are impossible to 100% emulate in zBassMusic.</li> </ul> <p>If you would like to have more options, use zBassMusic Theme classes instead.</p>"},{"location":"user-guide/transitions/","title":"Transitions","text":"<p>zBassMusic implements a scheduler to do advanced transition between music themes. This allows a composer or developer to set up seamless transitions for a greater artistic value of a soundtrack.</p>"},{"location":"user-guide/transitions/#settings","title":"Settings","text":""},{"location":"user-guide/transitions/#default","title":"Default","text":"<p>If no transition was explicitly defined, the default strategy implements an immediate cross-fade, taking into account the fade-in and fade-out effect settings of the themes.</p>"},{"location":"user-guide/transitions/#timing","title":"Timing","text":"<p>Timing settings let you limit on which moments a transition may happen and what time spans to use for effects. Check Timing for more information.</p>"},{"location":"user-guide/transitions/#jingle","title":"Jingle","text":"<p>Jingle plays an additional audio file in-between transitioning songs. You can use it, for example to transition from fight music to standard music with a nice finish sound. Check Jingle for more information.</p>"},{"location":"user-guide/transitions/#midi-files","title":"MIDI Files","text":"<p>Some time-dependent parameters of a transition can be set up in a special MIDI track to make it easier for an artist to design. Check MIDI Files for more information.</p>"},{"location":"user-guide/transitions/#filter","title":"Filter","text":"<p>A transition is assigned to Music Theme with a many-to-one relation.  Every function to add a transition has a <code>filter</code> parameter that defines for which target themes this transition applies.</p> <p>To set up default transition, use an empty string (\"\") for the filer. Default filter matches every transition which wasn't explicitly matched by another.  </p> <p>If <code>filter</code> is not an empty string, it contains a regular expression for the target theme to match.</p> <ul> <li><code>TargetThemeA</code> - matches every string that includes <code>TargetThemeA</code></li> <li><code>^TargetThemeA$</code> - matches string that equals exactly <code>TargetThemeA</code></li> <li><code>TargetThemeA|TargetThemeB|TargetThemeC</code> - matches every string that includes one of <code>TargetThemeA</code>, <code>TargetThemeB</code>, <code>TargetThemeC</code></li> <li><code>^(TargetThemeA|TargetThemeB|TargetThemeC)$</code> - matches every string that equals exactly one of <code>TargetThemeA</code>, <code>TargetThemeB</code>, <code>TargetThemeC</code></li> <li><code>^Target</code> - matches every string that starts with <code>Target</code></li> <li><code>Fight$</code> - matches every string that ends with <code>Fight</code></li> </ul> <p>Filters are tested in no guaranteed order and the first match wins.  If you are using fuzzy matchers, make sure to avoid overlaps or your transitions will be non-deterministic.</p>"},{"location":"user-guide/transitions/jingle/","title":"Jingle","text":"<p>Jingle plays an additional audio file in-between transitioning songs. You can use it, for example to transition from fight music to standard music with a nice finish sound. To define it you need:</p> <ul> <li>Audio File - audio file located in <code>_work/Data/Music</code></li> <li>Delay - delay in seconds from the start of ending transition before the jingle starts </li> </ul> <p>Jingle works alongside Default and Timing, scheduling itself on every transition.</p> <p></p>"},{"location":"user-guide/transitions/jingle/#daedalus","title":"Daedalus","text":"<p>To set up jingle, you have to add it to a theme using Daedalus API.</p> <pre><code>BassMusic_AddJingle(\n    \"MyThemeToTransition\", // theme\n    \"OC_DAY_STD\",          // filter; this works only on MyThemeToTransition-&gt;OC_DAY_STD transition\n    \"JingleFile.wav\",      // audio file\n    1.0                    // delay in seconds\n);\n</code></pre> <p>Only one Jingle can be configured for (theme, filter) pair, but you can have multiple Jingles with different filters.</p> <p>You can use that function for example inside <code>INIT_GLOBAL()</code> function in <code>Startup.d</code> file.</p> <pre><code>func void BassMusic_Init()\n{\n    BassMusic_AddJingle(\"MyThemeToTransition\", \"OC_DAY_STD\", \"JingleFile.wav\", 1.0);\n};\n\nfunc void INIT_GLOBAL()\n{\n    // ...\n    BassMusic_Init();\n};\n</code></pre>"},{"location":"user-guide/transitions/midi/","title":"MIDI Files","text":"<p>MIDI files can be used to set up time-depended properties for the transitions. A MIDI file:</p> <ul> <li>has the same duration and tempo as the song</li> <li>uses notes to mark time spans (press + release pair)</li> <li>if song has a variable tempo, MIDI file must emit TEMPO events (should be done by DAW)</li> </ul>"},{"location":"user-guide/transitions/midi/#usage","title":"Usage","text":"<p>MIDI files are located in <code>_work/Data/Music</code>.</p>"},{"location":"user-guide/transitions/midi/#default-transition-instance","title":"Default Transition (Instance)","text":"<pre><code>instance MyTheme_Audio(BassMusic_ThemeAudio) {\n    // skipped\n    midiFile = \"mytheme.mid\";\n    // skipped\n};\n</code></pre>"},{"location":"user-guide/transitions/midi/#default-transition-api","title":"Default Transition (API)","text":"<pre><code>BassMusic_AddMidiFile(\"MyTheme\", \"\", \"mytheme.mid\");\n</code></pre>"},{"location":"user-guide/transitions/midi/#filtered-transition-api","title":"Filtered Transition (API)","text":"<pre><code>BassMusic_AddMidiFile(\"MyTheme\", \"TargetTheme\", \"mytheme.mid\");\n</code></pre>"},{"location":"user-guide/transitions/midi/#notes","title":"Notes","text":""},{"location":"user-guide/transitions/midi/#timing","title":"Timing","text":""},{"location":"user-guide/transitions/midi/#a4-fade-out","title":"A4 (Fade-out)","text":"<p>A4 note marks a Timing Transition with CROSSFADE effect. The note position is the start of transition and the note duration is the fade-out duration. By default, the next song fade-in has the same timing unless you set up A#4.</p> <p></p>"},{"location":"user-guide/transitions/midi/#a4-fade-in","title":"A#4 (Fade-in)","text":"<p>A#4 note is an optional addition to A4 (Fade-out) that sets up the start and duration of the fade-out effect.</p> <p></p>"},{"location":"user-guide/transitions/midi/#working-in-daw","title":"Working in DAW","text":"<p>You can create the MIDI file as an additional track in your song project. This approach guarantees that the timing  is consistent. During export, please export the MIDI track as an additional file that contains only this track.</p> <p>For transitions, you can simulate them using the automation tools in your DAW and place the MIDI notes based on that.</p> <p></p>"},{"location":"user-guide/transitions/timing/","title":"Timing","text":"<p>Timing settings let you limit on which moments a transition may happen and what time spans to use for effects. To define it, we are using a set of parameters:</p> <ul> <li>Start - when to start the end effect of the ending theme</li> <li>Duration - how long the end effect of the ending theme takes</li> <li>Effect - which end effect to use for the ending theme</li> <li>NextStart - when to start the start effect of the starting theme</li> <li>NextDuration - how long the start effect of the starting theme takes</li> <li>NextEffect - which start effect to use for the starting theme</li> </ul> <p></p>"},{"location":"user-guide/transitions/timing/#effects","title":"Effects","text":""},{"location":"user-guide/transitions/timing/#none-0","title":"NONE = 0","text":"<p>Disables the transition effect.</p>"},{"location":"user-guide/transitions/timing/#crossfade-1","title":"CROSSFADE = 1","text":"<p>Uses fade-in and fade-out effects.</p>"},{"location":"user-guide/transitions/timing/#daedalus","title":"Daedalus","text":"<p>To set up a timing transition, you have to add a time point to a theme using the Deadalus API.</p> <pre><code>BassMusic_AddTransitionTimePoint(\n    \"MyThemeForTransition\", // theme\n    \"\",                     // filter\n    4.0,                    // start in seconds  \n    1.0,                    // duration in seconds\n    1,                      // effect (CROSSFADE = 1)\n    4.5,                    // start in seconds  \n    1.0,                    // duration in seconds\n    1                       // effect (CROSSFADE = 1)\n);\n</code></pre> <p>This call will add a time point in the default transition of <code>MyThemeForTransition</code>.  Transition will start a 1s fade-out on the 4<sup>th</sup> second of the song and 0.5s later the next song will start its own 1s fade-in.</p> <p>You can add many time points to a single (theme, filter) pair.  It's recommended to set up at least 1 transition per each few seconds of the song, because they are the only moments when we can change themes.</p> <p>You should also create a time point <code>Duration</code> seconds before the end, because if no future time point exists, the scheduler fallbacks to the immediate default transition.</p>"},{"location":"user-guide/transitions/timing/#midi","title":"MIDI","text":"<p>Timing points can be defined using a MIDI file. Check MIDI Files for more information.</p>"}]}